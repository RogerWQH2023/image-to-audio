import t from"image-decode";function e(){return e=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=n[s])}return t},e.apply(this,arguments)}function n(t,e,n){for(var s=n.length,a=0;a<s;++a)t.setUint8(e+a,n.charCodeAt(a))}class s{constructor(t){this.sampleRate=void 0,this.numChannels=void 0,this.options=void 0,this._dataViews=[],this._numSamples=0,this.options=e({sampleRate:44100,numChannels:1},t),this.sampleRate=this.options.sampleRate,this.numChannels=this.options.numChannels}get dataViews(){return this._dataViews}encode(t){let e=t[0].length,n=this.numChannels,s=new DataView(new ArrayBuffer(e*n*2)),a=0;for(let i=0;i<e;++i)for(let e=0;e<n;++e){const n=32767*t[e][i];s.setInt16(a,n<0?Math.max(n,-32768):Math.min(n,32767),!0),a+=2}return this._dataViews.push(s),this._numSamples+=e,s}finish(t="audio/wav"){const e=this.numChannels*this._numSamples*2,s=new DataView(new ArrayBuffer(44));n(s,0,"RIFF"),s.setUint32(4,36+e,!0),n(s,8,"WAVE"),n(s,12,"fmt "),s.setUint32(16,16,!0),s.setUint16(20,1,!0),s.setUint16(22,this.numChannels,!0),s.setUint32(24,this.sampleRate,!0),s.setUint32(28,4*this.sampleRate,!0),s.setUint16(32,2*this.numChannels,!0),s.setUint16(34,16,!0),n(s,36,"data"),s.setUint32(40,e,!0),this._dataViews.unshift(s);const a=new Blob(this._dataViews,{type:t});return this._dataViews=[],a}destory(){delete this._dataViews}}function a(n,s){const a=t(n,s),i=[];let o=0;for(;o<a.data.length;)i.push(a.data.slice(o,o+=4));return e({},a,{data:i})}function i(t){let e=0;const n=765*t.length;for(let n=0;n<t.length;n++){const[s,a,i,o]=t[n];e+=s+a+i}return 2e4*e/n}function o(t,e){var n;let s=[];if(e.encodeData)s=e.encodeData(t);else for(let e=0;e<t.width;e++){const n=[];for(let s=0;s<t.height;s++)n.push(t.data[s*t.width+e]);s.push(n)}const a=null!=(n=e.encodeFunc)?n:i;return s.map(t=>a(t))}function h(t,e){const{sampleRate:n,seconds:s}=e,a=[],i=n*s/t.length,o=s/t.length;for(let e=0;e<t.length;e++){const n=~~(t[e]*o)*Math.PI*2;for(let t=0;t<i;t++){const e=Math.sin(t/i*n);a.push(e)}}return new Float32Array(a)}function l(t,n){const i=e({sampleRate:44100,bpm:60,beat:1/4},n),l=o(a(t,null==i?void 0:i.mimeType),i),r=h(l,{sampleRate:i.sampleRate,seconds:l.length*i.beat/i.bpm*60}),u=new s({sampleRate:i.sampleRate});return u.encode([r]),u.finish()}export{s as AudioEncoder,a as decodeImage,l as default,o as encodeImage2Freqs,h as freqs2AudioData,l as imageToAudio};
//# sourceMappingURL=index.modern.mjs.map
