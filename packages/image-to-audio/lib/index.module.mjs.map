{"version":3,"file":"index.module.mjs","sources":["../src/AudioEncoder.ts","../src/decodeImage.ts","../src/encodeImage2Freqs.ts","../src/freqs2AudioData.ts","../src/imageToAudio.ts"],"sourcesContent":["function setString(view: DataView, offset: number, str: string) {\n  var len = str.length;\n  for (var i = 0; i < len; ++i)\n    view.setUint8(offset + i, str.charCodeAt(i));\n};\n\nexport type AudioEncoderOptions = {\n  /** sampling rate [Hz], defaults to 44100Hz */\n  sampleRate?: number;\n  /** number of audio channels, defaults to 1 */\n  numChannels?: number;\n}\n\nexport class AudioEncoder {\n  readonly sampleRate: number;\n  readonly numChannels: number;\n  readonly options: AudioEncoderOptions;\n  private _dataViews: DataView[] = [];\n  private _numSamples = 0;\n\n  constructor(options?: AudioEncoderOptions) {\n    this.options = {\n      sampleRate: 44100,\n      numChannels: 1,\n      ...options,\n    }\n    this.sampleRate = this.options.sampleRate;\n    this.numChannels = this.options.numChannels;\n  }\n\n  get dataViews() {\n    return this._dataViews\n  }\n\n  encode(buffer: Float32Array[]) {\n    let len = buffer[0].length,\n      nCh = this.numChannels,\n      view = new DataView(new ArrayBuffer(len * nCh * 2)),\n      offset = 0;\n    \n    for (let i = 0; i < len; ++i)\n      for (let ch = 0; ch < nCh; ++ch) {\n        const x = buffer[ch][i] * 0x7fff;\n        view.setInt16(offset, x < 0 ? Math.max(x, -0x8000) : Math.min(x, 0x7fff), true);\n        offset += 2;\n      }\n    \n    this._dataViews.push(view);\n    this._numSamples += len;\n\n    return view;\n  };\n\n  finish(mimeType: string = 'audio/wav') {\n    const dataSize = this.numChannels * this._numSamples * 2,\n      view = new DataView(new ArrayBuffer(44));\n    \n    setString(view, 0, 'RIFF');\n    view.setUint32(4, 36 + dataSize, true);\n    setString(view, 8, 'WAVE');\n    setString(view, 12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, this.numChannels, true);\n    view.setUint32(24, this.sampleRate, true);\n    view.setUint32(28, this.sampleRate * 4, true);\n    view.setUint16(32, this.numChannels * 2, true);\n    view.setUint16(34, 16, true);\n    setString(view, 36, 'data');\n    view.setUint32(40, dataSize, true);\n    this._dataViews.unshift(view);\n\n    const blob = new Blob(this._dataViews, { type: mimeType });\n    this._dataViews = []\n\n    return blob;\n  };\n\n  destory() {\n    delete this._dataViews;\n  }\n}\n\nexport default AudioEncoder","import decode from 'image-decode';\n\nexport type DecodedImage = {\n  data: Uint8Array[];\n  width: number;\n  height: number;\n}\n\nexport type ImageInputTypes = ArrayBuffer | Buffer | Uint8Array | string\n\n/**\n * Takes input buffer with encoded image data and decodes its contents. \n * @param input buffer can be any binary data container: ArrayBuffer | Buffer | Uint8Array | base64 string\n * @param mimeType mimeType can be passed to skip image type detection.\n * @returns returns pixels data array with layout [[r, g, b, a], [r, g, b, a], ...]\n */\nexport function decodeImage(input: ImageInputTypes, mimeType?: string) {\n  const result: {\n    data: Uint8Array;\n    width: number;\n    height: number;\n  } = (decode as any)(input, mimeType)\n\n  const data: Uint8Array[] = []\n  let index = 0\n  while (index < result.data.length) {\n    data.push(result.data.slice(index, (index += 4)));\n  }\n\n  return {\n    ...result,\n    data,\n  }\n}","import { DecodedImage } from \"./decodeImage\";\n\nexport type EncodeImage2FreqsOptions = {\n  /** rebuild encode data, defaults arrange from left to right */\n  encodeData?: (data: DecodedImage) => Uint8Array[][];\n  /** transform pixel [r, g, b, a] to number range in [-1, 1] */\n  encodeFunc?: (pixels: Uint8Array[]) => number;\n}\n\nfunction encodePixel(pixels: Uint8Array[]): number {\n  const maxFreq = 20000; // maximun sound frequency (hz)\n  let total = 0\n  const maxSum = 255 * 3 * pixels.length\n  for (let i = 0; i < pixels.length; i++) {\n    const [r, g, b, a] = pixels[i];\n    total += r + g + b;\n  }\n  const freq = maxFreq * total / maxSum\n\n  return freq\n}\n\nexport function encodeImage2Freqs(data: DecodedImage, options?: EncodeImage2FreqsOptions) {\n  let encodeData: Uint8Array[][] = []\n  if (options.encodeData) {\n    encodeData = options.encodeData(data)\n  } else {\n    for (let i = 0; i < data.width; i++) {\n      const array = []\n      for (let j = 0; j < data.height; j++) {\n        array.push(data.data[j * data.width + i])\n      }\n      encodeData.push(array)\n    }\n  }\n\n  const encodeFunc = options.encodeFunc ?? encodePixel\n\n  const result = encodeData.map(pixels => encodeFunc(pixels))\n  \n  return result;\n}","export type Freqs2AudioOptions = {\n  sampleRate: number;\n  seconds: number;\n}\n\nexport function freqs2AudioData(freqs: number[], options: Freqs2AudioOptions) {\n  const { sampleRate, seconds } = options;\n  const totalSamples = sampleRate * seconds;\n\n  const result: number[] = [];\n  const eachFreqSamples = totalSamples / freqs.length;\n  const eachFreqSeconds = seconds / freqs.length;\n\n  for (let i = 0; i < freqs.length; i++) {\n    const freq = freqs[i];\n    const freqWaveLength = ~~(freq * eachFreqSeconds) * Math.PI * 2;\n    \n    for (let j = 0; j < eachFreqSamples; j++) {\n      const waveX = (j / eachFreqSamples) * freqWaveLength\n      const waveY = Math.sin(waveX);\n      result.push(waveY);\n    }\n  }\n  \n  return new Float32Array(result);\n}","import AudioEncoder from \"./AudioEncoder\";\nimport { DecodedImage, decodeImage, ImageInputTypes } from \"./decodeImage\";\nimport { encodeImage2Freqs } from \"./encodeImage2Freqs\";\nimport { freqs2AudioData } from \"./freqs2AudioData\";\n\nexport type ImageToAudioOptions = {\n  mimeType?: string;\n  /** rebuild encode data, defaults arrange from left to right */\n  encodeData?: (data: DecodedImage) => Uint8Array[][];\n  /** transform pixel [r, g, b, a] to number range in [-1, 1] */\n  encodeFunc?: (pixels: Uint8Array[]) => number;\n  /** sampling rate [Hz], defaults to 44100Hz */\n  sampleRate?: number;\n  /** Beat Per Minute, defaults to 60 */\n  bpm?: number;\n  /** beat, defaults to 1/4 */\n  beat?: number;\n}\n\nexport function imageToAudio(input: ImageInputTypes, options?: ImageToAudioOptions) {\n  const opts = {\n    sampleRate: 44100,\n    bpm: 60,\n    beat: 1 / 4,\n    ...options,\n  }\n\n  const imageData = decodeImage(input, opts?.mimeType);\n\n  const freqs = encodeImage2Freqs(imageData, opts);\n\n  const seconds = freqs.length * opts.beat / opts.bpm * 60;\n\n  const buffer = freqs2AudioData(freqs, {\n    sampleRate: opts.sampleRate,\n    seconds\n  });\n\n  const encoder = new AudioEncoder({\n    sampleRate: opts.sampleRate\n  });\n\n  encoder.encode([buffer]);\n  \n  return encoder.finish();\n}"],"names":["setString","view","offset","str","len","length","i","setUint8","charCodeAt","AudioEncoder","options","sampleRate","numChannels","_dataViews","this","_numSamples","_extends","_proto","prototype","encode","buffer","nCh","DataView","ArrayBuffer","ch","x","setInt16","Math","max","min","push","finish","mimeType","dataSize","setUint32","setUint16","unshift","blob","Blob","type","destory","key","get","decodeImage","input","result","decode","data","index","slice","encodePixel","pixels","total","g","_pixels$i","maxSum","encodeImage2Freqs","_options$encodeFunc","encodeData","width","array","j","height","encodeFunc","map","freqs2AudioData","freqs","seconds","eachFreqSamples","eachFreqSeconds","freqWaveLength","PI","waveY","sin","Float32Array","opts","bpm","beat","encoder"],"mappings":"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"}