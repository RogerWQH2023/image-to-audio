{"version":3,"file":"index.modern.mjs","sources":["../src/AudioEncoder.ts","../src/decodeImage.ts","../src/encodeImage2Freqs.ts","../src/freqs2AudioData.ts","../src/imageToAudio.ts"],"sourcesContent":["function setString(view: DataView, offset: number, str: string) {\n  var len = str.length;\n  for (var i = 0; i < len; ++i)\n    view.setUint8(offset + i, str.charCodeAt(i));\n};\n\nexport type AudioEncoderOptions = {\n  /** sampling rate [Hz], defaults to 44100Hz */\n  sampleRate?: number;\n  /** number of audio channels, defaults to 1 */\n  numChannels?: number;\n}\n\nexport class AudioEncoder {\n  readonly sampleRate: number;\n  readonly numChannels: number;\n  readonly options: AudioEncoderOptions;\n  private _dataViews: DataView[] = [];\n  private _numSamples = 0;\n\n  constructor(options?: AudioEncoderOptions) {\n    this.options = {\n      sampleRate: 44100,\n      numChannels: 1,\n      ...options,\n    }\n    this.sampleRate = this.options.sampleRate;\n    this.numChannels = this.options.numChannels;\n  }\n\n  get dataViews() {\n    return this._dataViews\n  }\n\n  encode(buffer: Float32Array[]) {\n    let len = buffer[0].length,\n      nCh = this.numChannels,\n      view = new DataView(new ArrayBuffer(len * nCh * 2)),\n      offset = 0;\n    \n    for (let i = 0; i < len; ++i)\n      for (let ch = 0; ch < nCh; ++ch) {\n        const x = buffer[ch][i] * 0x7fff;\n        view.setInt16(offset, x < 0 ? Math.max(x, -0x8000) : Math.min(x, 0x7fff), true);\n        offset += 2;\n      }\n    \n    this._dataViews.push(view);\n    this._numSamples += len;\n\n    return view;\n  };\n\n  finish(mimeType: string = 'audio/wav') {\n    const dataSize = this.numChannels * this._numSamples * 2,\n      view = new DataView(new ArrayBuffer(44));\n    \n    setString(view, 0, 'RIFF');\n    view.setUint32(4, 36 + dataSize, true);\n    setString(view, 8, 'WAVE');\n    setString(view, 12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, this.numChannels, true);\n    view.setUint32(24, this.sampleRate, true);\n    view.setUint32(28, this.sampleRate * 4, true);\n    view.setUint16(32, this.numChannels * 2, true);\n    view.setUint16(34, 16, true);\n    setString(view, 36, 'data');\n    view.setUint32(40, dataSize, true);\n    this._dataViews.unshift(view);\n\n    const blob = new Blob(this._dataViews, { type: mimeType });\n    this._dataViews = []\n\n    return blob;\n  };\n\n  destory() {\n    delete this._dataViews;\n  }\n}\n\nexport default AudioEncoder","import decode from 'image-decode';\n\nexport type DecodedImage = {\n  data: Uint8Array[];\n  width: number;\n  height: number;\n}\n\nexport type ImageInputTypes = ArrayBuffer | Buffer | Uint8Array | string\n\n/**\n * Takes input buffer with encoded image data and decodes its contents. \n * @param input buffer can be any binary data container: ArrayBuffer | Buffer | Uint8Array | base64 string\n * @param mimeType mimeType can be passed to skip image type detection.\n * @returns returns pixels data array with layout [[r, g, b, a], [r, g, b, a], ...]\n */\nexport function decodeImage(input: ImageInputTypes, mimeType?: string) {\n  const result: {\n    data: Uint8Array;\n    width: number;\n    height: number;\n  } = (decode as any)(input, mimeType)\n\n  const data: Uint8Array[] = []\n  let index = 0\n  while (index < result.data.length) {\n    data.push(result.data.slice(index, (index += 4)));\n  }\n\n  return {\n    ...result,\n    data,\n  }\n}","import { DecodedImage } from \"./decodeImage\";\n\nexport type EncodeImage2FreqsOptions = {\n  /** rebuild encode data, defaults arrange from left to right */\n  encodeData?: (data: DecodedImage) => Uint8Array[][];\n  /** transform pixel [r, g, b, a] to number range in [-1, 1] */\n  encodeFunc?: (pixels: Uint8Array[]) => number;\n}\n\nfunction encodePixel(pixels: Uint8Array[]): number {\n  const maxFreq = 20000; // maximun sound frequency (hz)\n  let total = 0\n  const maxSum = 255 * 3 * pixels.length\n  for (let i = 0; i < pixels.length; i++) {\n    const [r, g, b, a] = pixels[i];\n    total += r + g + b;\n  }\n  const freq = maxFreq * total / maxSum\n\n  return freq\n}\n\nexport function encodeImage2Freqs(data: DecodedImage, options?: EncodeImage2FreqsOptions) {\n  let encodeData: Uint8Array[][] = []\n  if (options.encodeData) {\n    encodeData = options.encodeData(data)\n  } else {\n    for (let i = 0; i < data.width; i++) {\n      const array = []\n      for (let j = 0; j < data.height; j++) {\n        array.push(data.data[j * data.width + i])\n      }\n      encodeData.push(array)\n    }\n  }\n\n  const encodeFunc = options.encodeFunc ?? encodePixel\n\n  const result = encodeData.map(pixels => encodeFunc(pixels))\n  \n  return result;\n}","export type Freqs2AudioOptions = {\n  sampleRate: number;\n  seconds: number;\n}\n\nexport function freqs2AudioData(freqs: number[], options: Freqs2AudioOptions) {\n  const { sampleRate, seconds } = options;\n  const totalSamples = sampleRate * seconds;\n\n  const result: number[] = [];\n  const eachFreqSamples = totalSamples / freqs.length;\n  const eachFreqSeconds = seconds / freqs.length;\n\n  for (let i = 0; i < freqs.length; i++) {\n    const freq = freqs[i];\n    const freqWaveLength = ~~(freq * eachFreqSeconds) * Math.PI * 2;\n    \n    for (let j = 0; j < eachFreqSamples; j++) {\n      const waveX = (j / eachFreqSamples) * freqWaveLength\n      const waveY = Math.sin(waveX);\n      result.push(waveY);\n    }\n  }\n  \n  return new Float32Array(result);\n}","import AudioEncoder from \"./AudioEncoder\";\nimport { DecodedImage, decodeImage, ImageInputTypes } from \"./decodeImage\";\nimport { encodeImage2Freqs } from \"./encodeImage2Freqs\";\nimport { freqs2AudioData } from \"./freqs2AudioData\";\n\nexport type ImageToAudioOptions = {\n  mimeType?: string;\n  /** rebuild encode data, defaults arrange from left to right */\n  encodeData?: (data: DecodedImage) => Uint8Array[][];\n  /** transform pixel [r, g, b, a] to number range in [-1, 1] */\n  encodeFunc?: (pixels: Uint8Array[]) => number;\n  /** sampling rate [Hz], defaults to 44100Hz */\n  sampleRate?: number;\n  /** Beat Per Minute, defaults to 60 */\n  bpm?: number;\n  /** beat, defaults to 1/4 */\n  beat?: number;\n}\n\nexport function imageToAudio(input: ImageInputTypes, options?: ImageToAudioOptions) {\n  const opts = {\n    sampleRate: 44100,\n    bpm: 60,\n    beat: 1 / 4,\n    ...options,\n  }\n\n  const imageData = decodeImage(input, opts?.mimeType);\n\n  const freqs = encodeImage2Freqs(imageData, opts);\n\n  const seconds = freqs.length * opts.beat / opts.bpm * 60;\n\n  const buffer = freqs2AudioData(freqs, {\n    sampleRate: opts.sampleRate,\n    seconds\n  });\n\n  const encoder = new AudioEncoder({\n    sampleRate: opts.sampleRate\n  });\n\n  encoder.encode([buffer]);\n  \n  return encoder.finish();\n}"],"names":["setString","view","offset","str","len","length","i","setUint8","charCodeAt","AudioEncoder","constructor","options","this","sampleRate","numChannels","_dataViews","_numSamples","dataViews","encode","buffer","nCh","DataView","ArrayBuffer","ch","x","setInt16","Math","max","min","push","finish","mimeType","dataSize","setUint32","setUint16","unshift","blob","Blob","type","destory","decodeImage","input","result","decode","data","index","slice","_extends","encodePixel","pixels","total","r","g","b","a","maxSum","encodeImage2Freqs","_options$encodeFunc","encodeData","width","j","height","array","encodeFunc","map","freqs2AudioData","freqs","seconds","eachFreqSamples","eachFreqSeconds","freqWaveLength","PI","waveY","sin","Float32Array","imageToAudio","bpm","beat","opts","encoder"],"mappings":"gQAAA,SAASA,EAAUC,EAAgBC,EAAgBC,GAEjD,IADA,IAAOC,EAAGD,EAAIE,OACLC,EAAI,EAAGA,EAAIF,IAAOE,EACzBL,EAAKM,SAASL,EAASI,EAAGH,EAAIK,WAAWF,GAC7C,CASaG,MAAAA,EAOXC,YAAYC,GAA6BC,KANhCC,gBAAU,EAAAD,KACVE,iBACAH,EAAAA,KAAAA,aACDI,EAAAA,KAAAA,WAAyB,GACzBC,KAAAA,YAAc,EAGpBJ,KAAKD,WACHE,WAAY,MACZC,YAAa,GACVH,GAELC,KAAKC,WAAaD,KAAKD,QAAQE,WAC/BD,KAAKE,YAAcF,KAAKD,QAAQG,WAClC,CAEaG,gBACX,OAAWL,KAACG,UACd,CAEAG,OAAOC,GACL,IAAIf,EAAMe,EAAO,GAAGd,OAClBe,EAAMR,KAAKE,YACXb,EAAO,IAAYoB,SAAC,IAAIC,YAAYlB,EAAMgB,EAAM,IAChDlB,EAAS,EAEX,IAAK,IAAKI,EAAG,EAAGA,EAAIF,IAAOE,EACzB,IAAK,IAAMiB,EAAG,EAAGA,EAAKH,IAAOG,EAAI,CAC/B,MAAOC,EAAmB,MAAhBL,EAAOI,GAAIjB,GACrBL,EAAKwB,SAASvB,EAAQsB,EAAI,EAAIE,KAAKC,IAAIH,GAAI,OAAUE,KAAKE,IAAIJ,EAAG,QAAS,GAC1EtB,GAAU,CACX,CAKH,OAHAU,KAAKG,WAAWc,KAAK5B,GACrBW,KAAKI,aAAeZ,EAEbH,CACT,CAEA6B,OAAOC,EAAmB,aACxB,MAAcC,EAAGpB,KAAKE,YAAcF,KAAKI,YAAc,EACrDf,EAAO,IAAYoB,SAAC,IAAIC,YAAY,KAEtCtB,EAAUC,EAAM,EAAG,QACnBA,EAAKgC,UAAU,EAAG,GAAKD,GAAU,GACjChC,EAAUC,EAAM,EAAG,QACnBD,EAAUC,EAAM,GAAI,QACpBA,EAAKgC,UAAU,GAAI,IAAI,GACvBhC,EAAKiC,UAAU,GAAI,GAAG,GACtBjC,EAAKiC,UAAU,GAAItB,KAAKE,aAAa,GACrCb,EAAKgC,UAAU,GAAIrB,KAAKC,YAAY,GACpCZ,EAAKgC,UAAU,GAAsB,EAAlBrB,KAAKC,YAAgB,GACxCZ,EAAKiC,UAAU,GAAuB,EAAnBtB,KAAKE,aAAiB,GACzCb,EAAKiC,UAAU,GAAI,IAAI,GACvBlC,EAAUC,EAAM,GAAI,QACpBA,EAAKgC,UAAU,GAAID,GAAU,GAC7BpB,KAAKG,WAAWoB,QAAQlC,GAExB,MAAMmC,EAAO,IAAQC,KAACzB,KAAKG,WAAY,CAAEuB,KAAMP,IAG/C,OAFAnB,KAAKG,WAAa,GAGpBqB,CAAA,CAEAG,iBACa3B,KAACG,UACd,EChEc,SAAWyB,EAACC,EAAwBV,GAClD,MAAMW,EAIDC,EAAeF,EAAOV,GAErBa,EAAqB,GAC3B,MAAY,EACZ,KAAOC,EAAQH,EAAOE,KAAKvC,QACzBuC,EAAKf,KAAKa,EAAOE,KAAKE,MAAMD,EAAQA,GAAS,IAG/C,OAAAE,EAAA,CAAA,EACKL,EAAM,CACTE,QAEJ,CCxBA,SAASI,EAAYC,GAEnB,IAASC,EAAG,EACZ,QAAe,IAAUD,EAAO5C,OAChC,IAAK,IAAIC,EAAI,EAAGA,EAAI2C,EAAO5C,OAAQC,IAAK,CACtC,MAAO6C,EAAGC,EAAGC,EAAGC,GAAKL,EAAO3C,GAC5B4C,GAASC,EAAIC,EAAIC,CAClB,CAGD,OATgB,IAOOH,EAAQK,CAGjC,UAEiCC,EAACZ,EAAoBjC,GACpD,IAAA8C,EAAA,MAAiC,GACjC,GAAI9C,EAAQ+C,WACVA,EAAa/C,EAAQ+C,WAAWd,QAEhC,IAAK,IAAKtC,EAAG,EAAGA,EAAIsC,EAAKe,MAAOrD,IAAK,CACnC,QAAc,GACd,IAAK,MAAQ,EAAGsD,EAAIhB,EAAKiB,OAAQD,IAC/BE,EAAMjC,KAAKe,EAAKA,KAAKgB,EAAIhB,EAAKe,MAAQrD,IAExCoD,EAAW7B,KAAKiC,EACjB,CAGH,QAAqC,OAAlBnD,EAAAA,EAAQoD,YAAUN,EAAIT,EAIzC,OAFeU,EAAWM,IAAIf,GAAUc,EAAWd,GAGrD,CCpCgBgB,SAAAA,EAAgBC,EAAiBvD,GAC/C,MAAME,WAAEA,EAAUsD,QAAEA,GAAYxD,EAGpB+B,EAAa,GACJ0B,EAHAvD,EAAasD,EAGKD,EAAM7D,OACvCgE,EAAkBF,EAAUD,EAAM7D,OAExC,IAAK,IAAKC,EAAG,EAAGA,EAAI4D,EAAM7D,OAAQC,IAAK,CACrC,MACoBgE,KADPJ,EAAM5D,GACc+D,GAAmB3C,KAAK6C,GAAK,EAE9D,IAAK,IAAKX,EAAG,EAAGA,EAAIQ,EAAiBR,IAAK,CACxC,MACMY,EAAQ9C,KAAK+C,IADJb,EAAIQ,EAAmBE,GAEtC5B,EAAOb,KAAK2C,EACb,CACF,CAED,OAAO,IAAgBE,aAAChC,EAC1B,CCNgB,SAAYiC,EAAClC,EAAwB9B,GACnD,QACEE,EAAAA,CAAAA,WAAY,MACZ+D,IAAK,GACLC,KAAM,EAAI,GACPlE,GAKCuD,EAAQV,EAFIhB,EAAYC,EAAOqC,MAAAA,OAAAA,EAAAA,EAAM/C,UAEA+C,KAI5Bb,EAAgBC,EAAO,CACpCrD,WAAYiE,EAAKjE,WACjBsD,QAJcD,EAAM7D,OAASyE,EAAKD,KAAOC,EAAKF,IAAM,KAOzCG,EAAG,IAAItE,EAAa,CAC/BI,WAAYiE,EAAKjE,aAKnB,OAFAkE,EAAQ7D,OAAO,CAACC,IAEF4D,EAACjD,QACjB"}